{"version":3,"sources":["Components/Form/Form.module.css","Components/Forecast/Forecast.module.css","Containers/Layout/Layout.module.css","Components/Titles/Titles.module.css","Containers/Layout/Layout.js","Components/Form/Form.js","util/Weather/Weather.js","Components/Titles/Titles.js","Components/Forecast/Forecast.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Layout","className","styles","Content","this","props","children","Component","Form","getInput","userInput","document","getElementsByTagName","value","getLocation","handleSearch","location","searchWeather","focus","autoFocus","search","type","maxLength","onChange","placeholder","onClick","switchUnits","units","apiKey","Weather","getWeatherData","searchTerm","fetch","response","json","data","console","log","saveWeatherData","name","main","weather","description","temp","feelsLike","feels_like","tempMin","temp_min","tempMax","temp_max","pressure","wind","speed","degrees","deg","sunrise","sys","sunset","error","Titles","style","Title","Forecast","App","state","weatherData","handleLocation","bind","handleUnitChange","handleWeatherData","nextProps","nextState","str","setState","change","then","forecastData","forecast","Boolean","window","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.4db66014.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Form\":\"Form_Form__2Bzy-\",\"search\":\"Form_search__CifuG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Forecast\":\"Forecast_Forecast__12asK\",\"name\":\"Forecast_name__iQAPw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Content\":\"Layout_Content__3HqCG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Title\":\"Titles_Title__2zWnI\"};","import React, {Component} from 'react';\nimport styles from './Layout.module.css';\n\nclass Layout extends Component {\n    render() {\n        return (\n            <main className={styles.Content}>\n                {this.props.children}\n            </main>\n        );\n    }\n}\n\nexport default Layout;\n","import React, { Component } from 'react';\nimport styles from './Form.module.css';\n\nclass Form extends Component {\n\n    getInput = () => {\n        let userInput = document.getElementsByTagName('input')[0].value;\n        this.props.getLocation(userInput);\n    }\n\n    handleSearch = () => {\n        if (this.props.location === \"\") {\n            document.getElementsByTagName('input')[0].focus();\n            return;\n        }\n        this.props.searchWeather();\n    };\n\n    render () {\n        return (\n            <div className={styles.Form}>\n                <input\n                    autoFocus \n                    className={styles.search} \n                    type=\"text\"\n                    maxLength=\"35\" \n                    onChange={this.getInput}\n                    value={this.props.location}\n                    placeholder=\"Enter City name\"  />\n                <button onClick={this.props.switchUnits}>{this.props.units}</button>\n                <button onClick={this.handleSearch}>Search</button>\n            </div>\n        );\n    }\n};\n\nexport default Form;\n","const apiKey = \"4977766ec9fddf6a4a774c619886639d\"\n\nconst Weather = {\n\n    async getWeatherData(searchTerm, units=\"imperial\") {\n        try {\n            const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${searchTerm}&appid=${apiKey}&units=${units}`)\n            const data = await response.json();\n            return await data;\n        } catch (error) {\n            console.log(error)\n        }\n    },\n\n    // Save only relevant data to state\n    saveWeatherData(data) {\n        try {\n            let forecastData = {\n                name: data.name,\n                main: data.weather[0].main,\n                description: data.weather[0].description,\n                temp: data.main.temp,\n                feelsLike: data.main.feels_like,\n                tempMin: data.main.temp_min,\n                tempMax: data.main.temp_max,\n                pressure: data.main.pressure,\n                wind: {\n                    speed: data.wind.speed,\n                    degrees: data.wind.deg\n                },\n                sunrise: data.sys.sunrise,\n                sunset: data.sys.sunset\n            };\n            return forecastData;        \n        } catch (error) {\n            console.log(error)\n        }\n    }\n};\n\nexport default Weather;","import React from 'react'\nimport style from './Titles.module.css';\n\nconst Titles = () => (\n    <header>\n        <h1 className={style.Title}>Weather Now</h1>\n    </header>\n)\n\nexport default Titles;","import React from \"react\";\nimport styles from './Forecast.module.css';\n\n// Display data\nconst Forecast = (props) => {\n  let data = props.data;\n  let units = props.units === \"imperial\" ? \"\\u00b0F\" : \"\\u00b0C\";\n  return (\n    <div className={styles.Forecast}>\n        <div className={styles.name}>{data.name}</div>\n        <div>{data.temp}{units} - {data.main}</div>\n        <div>{data.description} throughout the day</div>\n        <div>\n          <p>Feels Like - {data.feelsLike}{units}</p>\n          <p>Low - {data.tempMin}{units}</p>\n          <p>High - {data.tempMax}{units}</p>          \n        </div>\n\n        {/* <div>Pressure - {data.pressure}</div> */}\n        <div>Wind Speed - {data.wind.speed}</div>\n        <div>Wind Direction - {data.wind.degrees}{'\\u00b0'}</div>\n    </div>\n  );\n};\n\nexport default Forecast;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Layout from './Containers/Layout/Layout';\nimport Form from './Components/Form/Form';\nimport Weather from './util/Weather/Weather';\nimport Titles from './Components/Titles/Titles';\nimport Forecast from './Components/Forecast/Forecast';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { \n      location: \"\",\n      units: \"imperial\",\n      weatherData: null\n    }\n\n    this.handleLocation = this.handleLocation.bind(this);\n    this.handleUnitChange = this.handleUnitChange.bind(this);\n    this.handleWeatherData = this.handleWeatherData.bind(this);\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    return nextProps.location !== this.state.location\n  }\n\n  handleLocation(str) {\n    this.setState({location: str});\n  }\n\n  handleUnitChange() {\n    const change = (this.state.units === \"imperial\" ? \"metric\" : \"imperial\");\n    this.setState({units: change});\n  }\n\n  // Get data and save to state\n  handleWeatherData() {\n    Weather.getWeatherData(this.state.location, this.state.units).then(response => {\n      let forecastData = Weather.saveWeatherData(response)\n      this.setState({weatherData: forecastData})\n    });\n  }\n\n  render() {\n    let forecast;\n    if (this.state.weatherData) {\n      forecast = <Forecast data={this.state.weatherData} units={this.state.units} />\n    } else {\n      forecast = null;\n    }\n\n    return (\n      <div className=\"App\">\n        <Layout>\n          <Titles />\n          <Form\n            location={this.state.location} \n            getLocation={this.handleLocation}\n            switchUnits={this.handleUnitChange}\n            units={this.state.units}\n            searchWeather={this.handleWeatherData}\n          />\n          {/* <button onClick={this.handleWeatherData}> Click </button> */}\n          {forecast}\n        </Layout>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}